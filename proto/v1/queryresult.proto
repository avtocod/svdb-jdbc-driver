syntax = "proto3";
package codes.spectrum.svdb.model.v1;
option go_package = "gitlab.spectrumdata.tech/sd3/svdb/go/model/v1";

import "v1/state.proto";
import "v1/warning.proto";
import "v1/record.proto";
import "v1/column.proto";
import "v1/byte_record.proto";

// обертка результата запроса
// NOTE: результат запроса это еще не сами данные,
// а только логический курсор над ними, соответственно
// ошибочные статусы на этой фазы - это ошибки SdQL,
// недостаток пермиссий и т.п., ошибки чтения самих данных
// будут упаковываться в RecordResult
message QueryResult {

    // @FUTURE: 0.3.0 - там потребуются токены для QueryResult KISS/YAGNI
    // токен для использования в вызовах методов, связанных с результатом
    // NOTE: так-то это просто строка, но не хочется использовать
    // вообще нигде не строгие типы, и поэтому это boxed - строка
    // идентификатора, который используется для обратной отсылки референсов
    // на результат в Fetch
    // NOTE: в отличие от классических сессий типа Pg, Cassandra сессии
    // в SVDB позволят открыть паралелльно несколько результатов и читать
    // из них (не с прототипа но далее) и соответственно одновременно
    // может быть несколько активных QueryResult в рамках одной сессии
    //message Token {
        // уникальный идентифиактор результата (уникален в рамках сессии)
        // позволяет кореллировать запросы и их резултаты и при этом
        // не передавать весь объект QueryResult в обе стороны
      //  string result_uid = 1;
    //}

    //@FUTURE: 0.3.0 при успехе уникальный идентификатор результата KISS/YAGNI
    //Token token = 1;

    reserved 1; // под token

    // не используется, будет DEPRECATED в версии 2.0
    string ver = 3;

    // режим передачи данных
    DataMode dataMode = 2;

    // метаданные, содержащие структуру ответа: имена и типы полей, опции
    repeated Column columns = 4;

    // данные ответа в виде массива байтов
    repeated ByteRecord byteRecords = 5;

    // статус запроса - OK при успешном формировании плана запроса,  в случае ошибок SdQL (400)
    // или при нарушении ACL (403) или иных интернальных ошибках (500)
    State state = 10;

    // при запросе в режиме SYNC - тут будет сразу возвращены записи
    repeated Record records = 20;

    // предупреждения, для вывода в потоке текста 
    repeated Warning warnings = 30;
}

enum DataMode {
    // режим без метаданных, через v1.Value
    // будет DEPRECATED в версии 2.0
    V1 = 0;
    // режим с метаданными и массивом байтов
    V2 = 1;
}
